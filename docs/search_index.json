[
["wiki.html", "BCB420 - Computational System Biology Chapter 1 Wiki - Editing 1.1 Overview 1.2 Wiki 1.3 The Wiki concept 1.4 Editing basics 1.5 The “User space” and subpages 1.6 Copyright 1.7 Task 1.8 Self-evaluation 1.9 Notes", " BCB420 - Computational System Biology Boris Steipe 2019-01-04 Chapter 1 Wiki - Editing (Wiki editing, namespaces; user page setup; copyright, a Course Journal stub page, and an insights! stub page) 1.1 Overview 1.1.1 Abstract: This will likely be the first learning unit you work with, since your Course Journal will be kept on a Wiki, as well as all other deliverables. This unit includes an introduction to authoring Wikitext and the structure of Wikis, in particular how different pages live in separate “Namespaces”. The unit also covers the standard markup conventions - “Wikitext markup” - the same conventions that are used on Wikipedia - as well as some extensions that are specific to our Course- and Student Wiki. We also discuss page categories that help keep a Wiki organized, licensing under a Creative Commons Attribution license, and how to add licenses and other page components through template codes. 1.1.2 Objectives: Provide an introduction to Wiki principles and Wikitext markup. Create first pages on your own on the Student Wiki. Learn about copyright, why we use Creative Commons licenses for the Student Wiki and how to place a license tag. 1.1.3 Outcomes: You are competent with basic Wiki markup and the extensions on this Wiki. You can create pages and add them to categories while taking care to create them into your own user space. You have created your own user page on the Student Wiki and added contents. You have created page stubs for a Course Journal and an insights! page. 1.1.4 Deliverables: Specified as “Tasks”: There are no general deliverables for this unit; specific deliverables are described in the “Task” sections. 1.2 Wiki Collaboration is a common theme for modern lab work and a Wiki is a great way to share and seamlessly update information in groups - or just for yourself. Probably the most sophisticated Wiki software is MediaWiki, a set of PHP scripts that is under continuous development by the Wikimedia foundation; it is the same software that runs Wikipedia. This is open source, free software that is easy to install, is well documented and requires very little resources other than a machine that runs a MySQL database server and an Apache Webserver. Numerous extensions exist (and extensions are not hard to write); they enhance the already rich functionality. But let’s start with small steps. You should by now have a user account on the Student Wiki, and I have configured that Wiki so that: only logged in users can view the pages; but … all logged in users can create and edit (most) pages at will. This means you could edit pages that don’t “belong” to you. Respect the “House Rules” and don’t edit other’s things without permission, even if you can think of a particularly witty comment or hilarious prank. If you want to comment on a page: every page has an associated “Discussion” page that you can freely edit. Remember to “sign your name” to discussion entries. Access the Student Wiki; log in and navigate to your user page. (Your user page is linked to your name that appears at the top of every Wikipage once you are logged in.) Create / edit the page, try out and experiment with the Wikitext syntax that this unit covers as you read about the different elements. Work through the contents below. For more extensive formatting help see:http://meta.wikimedia.org/wiki/Help:Editing For Math markup see: http://meta.wikimedia.org/wiki/Help:Formula 1.3 The Wiki concept Wiki sites are collections of Web pages that allow you to view, edit and create pages from your browser, there is no need for special technology and basic editing is simple and intuitive with “Wikitext markup”. The basic workflow of Wikis is straightforward: Register an account and browse the site. Whenever you find something that you can improve, edit it. Whenever you find something that you would like to comment on, click on the “discussion” tab and share your views. If you are interested in what becomes of your edits or the discussion, click on the “watch” tab, and the page will be added to a list of bookmarks to pages you are “watching”. (You can even generate an RSS feed for recent changes or new pages). No e-mail, no obligations. Do what you like, when you like, what you can. Editing on the Course Wiki is only enabled for instructors. However you can freely edit all pages on the Student Wiki, once you have an account. 1.4 Editing basics 1.4.1 Start editing To start editing a Wiki page, click on the “Edit” link at one of its edges. This will bring you to the edit page: a page with a text box containing the wikitext: the editable source code from which the server produces the webpage. 1.4.2 Preview before saving When you have finished, press Show preview to see how your changes will look. Repeat the edit/preview process until you are satisfied, then click Save and your changes will be immediately applied to the article and accessible on the Web. They will also be stored in the main database for as long as the Wiki exists. Thus it is always possible to get back earlier versions of pages - back to the very first edit. 1.4.3 Basic text formatting Here are some examples of the markup of Wikitext. It is not the same as HTML markup, however some HTML markup will work. In particular, the Wiki applies styles through CSS technology (Cascading Style Sheets) and thus HTML tags can be used to apply consistent styles to individual page elements. Javascript won’t work. What you type What it looks like You can emphasize text by putting two apostrophes on each side. Three apostrophes will emphasize it strongly. Five apostrophes is even stronger. You can emphasize text by putting two apostrophes on each side. Three apostrophes will emphasize it strongly. Five apostrophes is even stronger. A single newline has no effect on the layout.But an empty line starts a new paragraph. A single newline has no effect on the layout. But an empty line starts a new paragraph. You can break lines without starting a new paragraph using a &lt;br&gt; tag. You can break lines without starting a new paragraph. (This may not be very useful beyond the types of examples we show here, but it is a frequent source of confusion, when you find your text marked up this way by accident) You can format text in a monospace font with a dashed box around it either by marking it with the HTML &lt;pre&gt; tag, or by putting a blank space at the beginning of a line. Example: You can format text in a monospace font with a dashed box around it either by marking it with the HTML \\\" tag, or by putting a blank space at the beginning of a line. 1.4.4 Other special characters at the beginning of a line include: bulleted list bulleted list numbered list numbered list term ; term definition and definition 1.4.5 Other special characters at the beginning of a line include: You should “sign” your comments on discussion pages: Three tildes gives your user name - Boris (talk) Four tildes: user name plus date/time - Boris (talk) 22:18, 27 December 2012 (EST) Five tildes: date/time alone - 22:18, 27 December 2012 (EST) You should “sign” your comments on discusion pages: : Three tildes gives your user name - ~ : Four tildes: user name plus date/time - ~~ : Five tildes: date/time alone - ~~~ Use normal HTML character codes for special characters, or use Unicode. For example: &gt; &lt; &amp; ° Å Ä ü → Use normal HTML character codes for special characters, or use Unicode. For example: &gt; &lt; &amp; ° Å Ä ü → 1.4.6 You can use HTML tags, too, if you want. Some useful ways to use HTML: What you type What it looks like Put text in a typewriter font (with &lt;tt&gt;). The same font is generally used for computer code (with &lt;code&gt;). Put text in a typewriter font.The same font is generally used for computer code. Strike out (with &lt;string&gt;) or underline text(&lt;u&gt;), or write it in small caps(with &lt;span style=“font-variant:small-caps”&gt;. Strike out or underline text, or write it in small caps. Superscripts (with &lt;sup&gt;) and subscripts(with &lt;sub&gt;) : x2, x2 x2, x2 Invisible comments that only appear while editing the page. For a list of HTML tags that are allowed, see HTML in wikitext. I tend to use Wiki-markup when I’m in a hurry, but use the HTML tag whenever I can’t remember a Wiki-tag. It really doesn’t make a difference. However: I never use Wiki-table markup. I find it less intuitive than HTML markup, more difficult to debug, and there’s really no point in remembering both types of markup given that one really needs to be comfortable with HTML tables anyway. 1.4.7 Links You will often want to make clickable links to other pages. What it looks like What you type Here’s a link to a page named Sandbox. You can even say Sandboxes and the link will show up right. You can put formatting around a link. Example: Sandbox. Here’s a link to a page named [[Sandbox]]. You can even say [[Sandbox]]es and the link will show up right. You can put formatting around a link. Example: ‘’[[Sandbox]]’’. You can link to an arbitrary piece of text with a piped link. Put the link target first, then the pipe character “|”, then the link text - as in this example. You can link an arbitrary piece of text with a ‘’piped link’’. Put the link target first, then the pipe character “|”, then the link text - as in [[Sandbox| this example]]. You can make an external link to a Web page just by typing an URL, e.g. http://igem.org Or you can link arbitrary text: iGEM. (Note: No “|” for external links, URL and text are separated by a blank, and only single square brackets!) Or you can generate a footnote-like link: [1]. You can make an external link to a Web page just by typing an URL, e.g. http://igem.org Or you can link arbitrary text: [http://igem.org iGEM]. (Note: No “|” for ‘’’external’’’ links, URL and text are separated by a blank, and only single square brackets!) Or you can generate a footnote-like link: [http://igem.org]. Note: remember: internal links (using [[…]] tags to link to pages on this Wiki) are separated from linked text with a pipe character. External links (using […] tags to link to pages elsewhere on the Internet) are separated from linked text with a space character. 1.4.8 Special syntax Two special syntax items need to be mentioned: “templates” and “magic words”: #### Templates Templates are pieces of Wikitext that are substituted where a code that links to them has been placed into a page. For example, if you enter {{Lorem}} on a page, the “Lorem ipsum dolor sit amet …” placeholder text is inserted in place of that code. Wikis make extensive use of templates. #### Magic words some reserved “magic”-words are replaced with dynamically created contents when the page is rendered. For example TOC forces placing a Table Of Contents at the position of this token rather than its default position, while NOTOC suppresses creation of a Table Of Contents on a page. 1.4.9 Creating a new page To create a new page simply insert a link to a Wiki page, which has a page name that does not exist yet. The link will appear in red (except if you inadvertently used the name of a page that already exists), and the new page will be created when you click on the link. Page names can be long and contain blank spaces. Internally, all blank spaces are converted to underscore characters, but you can use the page name without underscores in links; the Wiki software translates this for you. 1.4.10 Namespaces The Wiki maintains some pages in special collections, in so called “namespaces”. This is useful, because the behaviour of the software can be customized for different namespaces: for example you may be allowed to edit in the main- and the user- namespace, but not in the MediaWiki: namespace, where pages are held that affect the gears and wires of the Wiki. Page names without a prefix live in the main space. Some commonly used prefixes are: * User: - personal pages for user with an account on the Wiki; * Talk: - discussion pages for comments on pages, accessible via the “Discussion” tab; * Help: - this page for example; * Template: - pages with reusable text. * Special: - pages that implement special functionality (like login, user lists, or lists of recently changed pages); * Category: - an index of pages that have been given a common tag. This is a convenient way to access pages that are in some way related; 1.4.11 Categories Once your page has been edited, you can associate it with one or more categories. Add the appropriate category tag by typing [[Category:BCH441_2013]] or [[Category:BCB410_2013]]. The page is then automatically linked from a page that collects all pages with that category tag. I would prefer that you do not create new categories; ask me if you feel a need for it. 1.4.12 Creating a new section or subsection on a page To create a section or subsection, simply insert a section header into an existing section. Header levels are defined by the number of “=” characters before and after the header text. Click on an edit link of this page to see example code. Once a page has more than two headings, the Wiki automatically creates a table of contents. You can adjust the position of the table of contents by typing the “magic word” __TOC__somewhere on your page (Note: double underscore), you can also suppress having a table of contents created withNOTOC. 1.4.13 Edit conflicts If someone else makes an edit while you are making yours, the result is an edit conflict. Many conflicts can be automatically resolved by the Wiki. If it can’t be resolved, however, you will need to resolve it yourself. The Wiki gives you two text boxes, where the top one is the other person’s edit and the bottom one is your edit. Merge your edits into the top edit box, which is the only one that will be saved. 1.4.14 Reverting pages to a previous state Sometimes a page needs to be reverted to a previous state. Access the page through a link to the Recent Changes special page: Special:Recentchanges. Find the page you need to revert, click on the hist link, click on the version you need and verify that it is the correct one. Then click on the edit tab at the top and Save page. A new version of the page is then created with the old text. Note that this does not actually overwrite anything - all edits are archived in the database. 1.5 The “User space” and subpages The User: namespace on the Student Wiki is especially important. Namespaces allow us to distinguish pages that share the same logical name. Every student will create a journal page, but of course there can be only one [[Journal]] page on the Wiki. Therefore each of these pages needs a distinct name. The obvious solution is to keep them in the User: namespace, and create them as subpages of everyone’s User page. The page name of your user page is [[User:]]; subpages are created with a backslash, and therefore your Course Journal page should be [[User:/Journal]]. if you take more than one course, you can separate the journals like [[User:/BCH441-Journal]], [[User:/BCB410-Journal]], etc. Please do not create pages in the “Main space” of the Student Wiki! Do not omit the User:/ part of the page name. 1.6 Copyright Over the last decades, in bioinformatics and many other fields of science, the paradigm under which we create value has profoundly changed. While we previously considered restrictions on the use of our insights important, tried to keep knowledge under control, and thought in terms of intellectual property, the modern paradigm is mindshare. We strive to make our work maximally useful to others, and to document how we are creating this utility. This does not mean that we are simply putting everything into the public domain: yes, people should use our ideas, but we must receive credit - as a currency for grant and scholarship applications and the like, to enable our future work. The right tool for this is copyright. Everything we write and create automatically falls under our copyright, there is no special copyright tag required. To have our material reused, we can either relinquish our copyright or grant a license to reuse. Material that is created in coursework will ideally be useful elsewhere, but it is only useful if its use is permitted and regulated. Wikis are tools for collaboration, and Wikipedia generally applies a site-wise license to all material. In our work we take a similar approach, but we apply licenses more specifically[1]. All material submitted for credit, including code, documentation, essays, manuals, images, lab journal entries, insights! pages etc. must be licensed with an appropriate open-source license. This is a strict requirement for the course. For code this is the MIT software license, for everything else this is the Creative Commons Attribution 4.0 International License. The MIT license for code guarantees that there are no restrictions on re-use other than fair and visible attribution of the authors’ work. The CC license guarantees proper attribution of authorship but allows free use otherwise. Together, these licenses allow the material to be used, refactored, updated and republished and thus (hopefully) give it a fertile future life. In order to keep copyright and licenses consistent throughout the site, we use a template tag - simply insert it at the bottom of a page: Entering the template code … {{CC-BY}} creates the copyright message … This copyrighted material is licensed under a Creative Commons Attribution 4.0 International License. Follow the link to learn more. 1.7 Task Practice basic editing syntax by putting contents on your User Page: enter your name, your major(s), specialist program, year of study - or a link to your lab and your thesis theme if you are a graduate student; enter your email address. I use this information a lot when I need to contact students, so make sure it is correct and current. Add a category tag to your User page for the course you are taking. All pages with this tag are accessible via the link in the sidebar. What should the category tag say? Good question … go and find out. Add a copyright template to the bottom of your user page by putting a {{CC-BY}} tag on its bottom. Feel free to look at my User Page for code examples: clicking on the edit link will show you the source text. How do you find my User Page? Good question … Create a subpage to your User Page; call it “Journal”. Note: the link MUST be in your “User space”. If you don’t add the prefix User:yourname/… before your page name, the new page will end up in the main “namespace”. I’ll then have to delete it. That’s not good. Make sure you know what you are doing, for example by looking at the code on my User Page, asking someone who knows, or asking on the mailing list. Put some placeholder text on your journal page, you will fill it in when you work through the Journal unit. Similarly, create an “insights!” page on a subpage to your User Page and add some placeholder text. That will be expanded when you work through the insights! unit. Play around some more. Feel free to ask how to go about achieving a particular effect that you may have seen elsewhere. 1.8 Self-evaluation You should be familiar with the following: * How to Login to the Student Wiki and access your user page; * viewing a page’s history; * basic text formatting and Wiki markup; * “signing” your name; * creating internal and external links; * creating section headers on a page on multiple levels; * reverting a changed page to an earlier version; * creating a new page (as a subpage of an existing page); * the concept of namespaces - especially the default (“main”) and User: namespace; * the concept of categories and how to add a page to a category; * copyright on the Student Wiki, and how to insert a license note. 1.9 Notes Note: that additional rules for collaboration in the context of coursework derive from the rules for academic integrity and plagiarism. If some text is not copyrighted, this does not mean you can use it without reference and thus imply it is your own idea. That would be plagiarism. ## Further reading, links and resources If in doubt, ask! If anything about this learning unit is not clear to you, do not proceed blindly but ask for clarification. Post your question on the course mailing list: others are likely to have similar problems. Or send an email to your instructor. Author: Boris Steipe boris.steipe@utoronto.ca Created: 2017-08-05 Modified: 2019-01-04 Version: 1.1 Version history: 1.1 Changed software license from GNU-GPL to MIT 1.0 Completed outcomes/objectives. Added copyright. First live version. 0.2 First contents imported from Help:editing. Added tasks. 0.1 First stub "],
["journal.html", "Chapter 2 Your Course Journal 2.1 Overview 2.2 Header 2.3 Objective 2.4 Estimate duration 2.5 What to document 2.6 Conclusions 2.7 Outlook for the next tasks 2.8 Cross references 2.9 Media 2.10 Wikitext Template 2.11 Self-evaluation 2.12 Further reading, links and resources", " Chapter 2 Your Course Journal (How to keep a course- or lab journal) 2.1 Overview 2.1.1 Abstract: Keeping a journal is an essential task in a laboratory. To practice keeping a technical journal, you will document your activities as you are working through the material of the course. A significant part of your term grade will be given for this Course Journal. This unit introduces components and best practice for lab- and course journals and includes a wiki-source template to begin your own journal on the Student Wiki. 2.1.2 Objectives: Introducing components and best practice of lab- and course journals Presenting sample wiki-text for Journal entries 2.1.3 Outcomes: Upon concluding this unit you should be able to … * Begin a structured course journal on the Student Wiki using proper wiki text; * Write your own journal entries, including media images and code as required; * Cross-reference journal entries with links; * Link to external sources and deliverables on internal pages as appropriate; * Estimate the time you need for tasks, and develop a habit of improving your time-management skills. 2.1.4 Deliverables: Your Journal: Your entire journal will be evaluated at the end of the course. Refer to the marking rubrics for details. Insights: If you find something particularly noteworthy about this unit, make a note in your insights! page. Your course journal is a deliverable of this course and it will be graded. Therefore all rules regarding plagiarism and other academic misconduct apply in full. In particular: do not include any material from elsewhere without referencing it: We are operating a “full disclosure” policy in this course. Anything that you did not write yourself, on the spot, must be referenced. In particular you need to reference if you are copying your own material from other courses.; do not fabricate material that you are posting in your journal. Fabrication could include things like: modifying results produced by your code, describing work that you have not actually done, or claiming a time for the journal entry that is not the time/date on which it was actually written. All of these are academic offences.; Note: Only journal entries that were written concurrently with the activity they describe will be evaluated for credit. Note: All journal pages on the Student Wiki—like all other submitted material—must contain a {{CC-BY}} template. 2.1.5 Prerequisites: You need the following preparation before beginning this unit. If you are not familiar with this material from courses you took previously, you need to prepare yourself from other information sources: * ‘’’Inquiry’‘’: The scientific method; evidence based reasoning; how to design, execute and document an experiment; Conjecture, hypothesis and theory. *’‘’Writing’’’: Basic essay and report writing skills. How to format your submitted materials, how to quote, cite and avoid plagiarism. * This unit builds on material covered in the following prerequisite units: * Wiki Unit Work through this unit, then make your work with the “Plagiarism” Unit the first entry of your Journal! Computational research embraces the same best-practice principles as any wet-lab experiment. We ensure our work is reproducible, we take great care that our conclusions are supported by data, and we keep notes to document our objectives, activities and how we arrived at our results. Those notes are more than just a handy collection of information: they need to become a robust, testable record of activities. Paper notes are not very useful for bioinformatics work because they can’t be cross-referenced easily with computer files. Ideally, bioinformatics journals will document results, and link to data files, code repositories, Webpages and other resources. Thus a technical solution needs to support incorporating or linking to results, data, code, workflow scripts, documentation, and much more. In this course, we use the open source Media Wiki software to support journal keeping. Here are some alternative applications – but (!) disclaimer, I myself don’t use any of these (yet): Evernote - a web hosted, automatically syncing e-notebook. Nevernote - the Open Source alternative to Evernote. Google Keep - if you have a Gmail account, you can simply log in here. Grid-based. Seems a bit awkward for longer notes. But of course you can also use Google Docs. Microsoft OneNote - this sounds interesting and if any one is using this, I’d like to hear from you. Syncing across platforms, being able to format contents and organize it sounds great. RStudio projects - for development-focussed work – especially (but not exclusively) – in R, an RStudio project may be the right solution to keep your code, results, notes, manuscript drafts, literature and other assets all in one place. The great benefit is that it can all be under version control and it’s super easy to share everything with colleagues on a team through GitHub Technically, GitHub documents are all publicly accessible if they are stored in repositories of free accounts - but you can commit binary files, so you can simply keep sensitive material in password-protected .zip files or otherwise encrypted.. The only downside that I can think of is that it’s not possible to cross-reference and link to material. Keeping a record of your activities is a habit, and habits need to be formed through practice. Is this going to be useful to you? I don’t know, but neither do you unless this habit has been given a credible chance to form. Therefore we practice keeping journals in this course. As a welcome side effect, this creates a record of activities for future reference, and provide a basis for evaluation of your progress at the end of the course. Keeping a journal will help you work with other learning units or project components effectively, because this is all integrated over the entire course, and later units often make use of earlier results which you should have easily accessible. Remember: you are writing a lab notebook—not a formal lab report: a point-form record of your actual activities.1 Write such documentation as notes to your (future) self. Record everything that’s necessary, but be light and agile about your writing. Write your notes immediately, in parallel with your actual activities, don’t draft them elsewhere and expect to enter and revise them later. Practice shows that delayed processing of journal notes creates an unmanageable burden. Therefore notes that are not written concurrently with the activity will not be considered for credit in this course. This too is about habit forming. But writing concurrently is so easy: since all of your computational work is done with a computer, begin every work-session by opening an editing window for its journal entry. Have the window open, and immediately record everything of importance. The Wiki is online, so you can even edit your journal from a library computer, and even (although it’s awkward) from your phone. Obviously, the first step is to create a journal page in the User space of the Student Wiki - you have already done this in the Wiki editing unit. 2.2 Header Write a header and give it a unique number. This is useful so you can refer to the header number in later text. Obviously, you should “hard-code” the number and not use the Wiki’s automatic section numbering scheme, since the numbers should be stable over time, not change when you add or delete a section2. It is useful to add any new contents at the top of the page. Keeping the page in reverse chronological order, prevents you having to scroll to the bottom of the page every time you add new material. Note though, that the sections do not actually have to be in strict chronological order, like we would have them in a paper notebook. Typically you would number in a decimal system - like 1, 1.1, 1.2, 2, 3 etc. - so you can easily accomodate additions. It may be advantageous to give different subprojects their own numbering space - by adding a prefix to the section number. This depends on how related the projects are. Everything you keep on the same page is easy to find with your browser’s search function. But if search results come from different projects, that may be inconvenient. To decide what to put on the same page and what should go in different subpages, imagine what material you would search for and what search terms you might use3. Incidentally: the material in such a notebook is “permanent”, since earlier versions of pages are always available via the history function. The Wiki never forgets. As well, they are automatically time-stamped. And that’s actually a step beyond paper labnotes. 2.3 Objective State the objective. In one brief sentence, restate what your activity is supposed to achieve. 2.4 Estimate duration The learning units in this course require you to estimate beforehand how long you will take, and to record how much time you actually took. Record your initial estimate (work-hours), how many hours you took, and how much time elapsed between start and end of your task. Make this a habit in your future coursework as well as in your future labwork. You will quickly note that you will become much better at time-management. The sample journal template that is included below contains wikitext to format a time estimate. 2.5 What to document Document the procedure - Note what you have done, as concisely as possible but with sufficient detail. “What is sufficient detail?” The answer is easy: detailed enough so that someone can reproduce what you have done. In practice that “someone” will often be you, yourself, in the future. I hope that you won’t be constantly cursing your past-self because of omissions! Document your results. You can distinguish different types of results - Static data does not change over time and it may be sufficient to note a reference to the result. For example, there is no need to copy a GenBank record into your documentation, it is sufficient to note the accession number, the refSeq ID, or the UniProt ID, or even better, to link to the relevant page on the external database server. Variable data can change over time. For example the results of a BLAST search depend on the sequences in the database. A list of similar structures may change as new structures get solved and deposited in the PDB database. In principle you want to record such data, to be able to reproduce at a later time what your conclusions were based on. But be selective in what you record. For example you should not paste the entire set of results of a BLAST search into your document, but only those matches that were important for your conclusions. ‘’’Indiscriminate pasting of irrelevant information will make your notes unusable.’’’ Incidentally, the technology to expand and collapse paragraphs that we demonstrated in the Wiki editing unit can be put to excellent use to record data but keep it out of sight when not needed. Analysis results - The results of sequence analyses, alignments etc. in general get recorded in your documentation. Again: be selective. Record what is important. 2.6 Conclusions Note your conclusions. - An analysis is not complete unless you conclude something from the results. * Are two sequences likely homologues, or not? Just pasting the BLAST output is not enough. It’s your call - ‘’’record it’’’. * Does your protein contain a signal-sequence or does it not? SignalP will give you a probability, but you must make the final call. * Is a binding site conserved, or not? The programs can only point out sections of similarity or dissimilarity. You are the one who interprets these numbers in their biological context. The analysis provides the data. In your conclusion you provide the interpretation of what the data means in the context of your objective. Were you expecting a signal-sequence but there isn’t one? What could that mean? Sometimes your task will explicitly include to elaborate on an analysis and conclusion. But this does not mean that when analysis is not explicitly mentioned, you can skip the interpretation. In general you can never expect full marks if analysis and conclusions are missing. 2.7 Outlook for the next tasks What’s the next step? Note it here. Also include a link to the logically next entry - this way you can quickly hop through consecutive entries for a theme. 2.8 Cross references Add cross-references. Cross-references to other information are supremely valuable as your documentation grows. It’s easy to see how to format a link to a section of your Wiki-page: just look at the link under the Table of Contents at the top. But you can also place “anchors” for linking anywhere on an HTML page: just use the following syntax. &lt;span id=“{some-label}”&gt;&lt;\\span&gt; for the anchor, and append #{some-label} to the page URL. 2.9 Media 2.9.1 Images Use discretion when uploading images Don’t upload irrelevant images, don’t upload copyrighted images, keep the size reasonable. Prepare your images well Don’t upload uncompressed screen dumps. Save images in a compressed file format on your own computer. Then use the Image Upload link in the left-hand menu to upload images. The Wiki will only accept .jpeg, .png, .gif, or .svg images. Use the correct image types. In principle, images can be stored uncompressed as .tiff or .bmp, or compressed as .gif or .jpg or .png. .gif is useful for images with large, monochrome areas and sharp, high-contrast edges because the LZW compression algorithm it uses works especially well on such data; .jpg (or .jpeg) is preferred for images with shades and halftones such as the structure views you should prepare for several assignments, JPEG has excellent application support and is the most versatile general purpose image file format currently in use; .tiff (or .tif) is preferred to archive master copies of images in a lossless fashion, use LZW compression for TIFF files if your system/application supports it; The .png format is an open source alternative for lossless, compressed images. .bmp is not preferred for really anything, it is bloated in its (default) uncompressed form and primarily used only because it is simple to code and ubiquitous on Windows computers. Accordingly we don’t support it here. 2.9.2 Image dimensions and resolution Stereo images should have equivalent points displayed approximately 6cm apart. It depends on your monitor how many pixels this corresponds to. The dimensions of an image are stated in pixels (width x height). My notebook screen has a native display resolution of 1440 x 900 pixels/23.5 x 21 cm. Therefore a 6cm separation on my notebook corresponds to approximately 260 pixels. However on my desktop monitor, 260 pixels is 6.7 cm across. And on a high-resolution iPad display, at 227 ppi (pixels per inch), 260 pixels are just 2.9 cm across. If your assigment or learning unit ask you to prepare stero images: adjust your images so they are approximately at the right separation and are approximately 500 to 600 pixels wide. Also, scale your molecules so they fill the available window and - if you have depth cueing enabled - move them close to the front clipping plane so the molecule is not just a dim blob, lost in murky shadows. Considerations for print (manuscripts etc.) are slightly different: for print output you can specify the output resolution in dpi (dots per inch). A typical print resolution is about 300 dpi: 6 cm separation at 300dpi is about 700 pixels. Print images should therefore be about three times as large in width and height as screen images. 2.9.3 Preparation of stereo views When assignments or leartning units ask you to create images of molecules, always create stereo views. Keep your images uncluttered and expressive Scale the molecular model to fill the available space of your image well. Orient views so they illustrate a point you are trying to make. Emphasize residues that you are writing about with a contrasting colouring scheme. Add labels, where residue identities are not otherwise obvious. Turn off side-chains for residues that are not important. The more you practice these small details, the more efficient you will become in the use of your tools. 2.9.4 Code Always markup code using the GeSHi extension. This provides syntax highlighting, which is very useful to read the code. You simply place the code-block into opening- and closing “source” tags, and tell GeSHi which language it should assume. For R-code this looks like: for i in 1:10{ a = 1 } You can also use GeSHi to markup plain text - (although you can achieve a similar effect by simply beginning each line with a blank &quot; “). Lorem ipsum dolor sit amet ... 2.10 Wikitext Template The section below contains Wiki-markup code that you can copy and paste for your course journal. &lt;!-- HTML comments will not be rendered by the wiki. --&gt; &lt;div class=&quot;b1&quot;&gt; Sample Journal &lt;/div&gt; &lt;!-- To position the table of contents at a particular position, include --&gt; &lt;!-- the __TOC__ &quot;magic text&quot; --&gt; {{Vspace}} __TOC__ {{Vspace}} &lt;!-- BEGIN template for one entry --&gt; == &lt;my activity&gt; == ;Objective : text ... &lt;div class=&quot;time-estimate&quot;&gt; Time estimated: XXX h; taken XXX h; date started: 2017-MM-DD; date completed: 2017-MM-DD &lt;/div&gt; ===Progress=== ;Activity 1 : Notes ... ;Activity 2 : Notes ... === Conclusion and outlook=== Describe ... {{Vspace}} &lt;!-- END of template for one entry --&gt; &lt;!-- BEGIN sample entry --&gt; == (Example Journal Entry) Explore Cytoscape == ;Objective : Write R code to generate a random network. Explore it with Cytoscape. &lt;div class=&quot;time-estimate&quot;&gt; Time estimated: 2 h; taken 4 h; date started: 2017-09-16; date completed: 2017-09-18 &lt;/div&gt; ===Progress=== ;R code for a random network. : Cytoscape can read networks in [http://wiki.cytoscape.org/Cytoscape_User_Manual/Network_Formats#SIF_format SIF format]. Wrote the following code to generate N random nodes with random interactions and write them to file. &lt;div class=&quot;toccolours mw-collapsible mw-collapsed&quot; style=&quot;width:800px&quot;&gt; My R code below ... &lt;div class=&quot;mw-collapsible-content&quot;&gt; &lt;source lang=&quot;R&quot;&gt; N &lt;- 15 # number of nodes nMin &lt;- 1 # minimum number of edges nMax &lt;- 5 # maximum number of edges OUT &lt;- &quot;myRandomSIF.txt&quot; # Create N random strings from three uppercase characters # First make more than we need, because some might not be unique ... nodes &lt;- character(2*N) set.seed(161803) for (i in 1:(2*N)) { nodes[i] &lt;- paste0(sample(LETTERS, 1), sample(LETTERS, 1), sample(LETTERS, 1)) } set.seed(NULL) nodes &lt;- unique(nodes) # throw away duplicates ... nodes &lt;- nodes[1:N] # ... and keep only N # Create SIF output mySIF &lt;- character() set.seed(112358) for (myA in nodes) { # for each node for (i in 1:sample(nMin:nMax, 1)) { # for a random number of interactors ... myB &lt;- sample(nodes, 1) # ... randomly choose interactor ... # ... create record and apend to mySIF mySIF &lt;- c(mySIF, sprintf(&quot;%s\\tpp\\t%s&quot;, myA, myB)) # myA, &quot;pp&quot;, myB # separated by tabs } } set.seed(NULL) # write mySIF to file writeLines(mySIF, OUT) &lt;/source&gt; &lt;/div&gt; &lt;/div&gt; ;Install Cytoscape : Straightforward installation of &lt;b&gt;Cytoscape 3.5.1&lt;/b&gt; from http://www.cytoscape.org ;Visualize and explore options *:Worked through an introductory tutorial from http://opentutorials.cgl.ucsf.edu/index.php/Tutorial:Introduction_to_Cytoscape_3.1-part2 Noteworthy: nodes can be coloured by attribute values. *:Loaded my own SIF file with the File → Import → Network → File option. Explored various layout options and visualization styles. Manually added nodes and edges with the options one gets when ctrl-clicking on the canvas. {{Vspace}} === Conclusion and outlook=== * Creating layouts, applying styles, adding nodes and edges with Cytoscape seems straightforward and creates evocative images. * Analyzing and interpreting the network needs more thought. Need to explore ideas and tools for network analysis next - e.g. clustering tools, enrichment tools, motif discovery ... * Next: write some code to create attribute values for nodes, import the values, and have Cytoscape style the nodes accordingly. {{Vspace}} ---- &lt;!-- Footnotes --&gt; ==Notes and References== &lt;references /&gt; {{Vspace}} &lt;!-- Category and Footer --&gt; [[Category:BCH441-2019_Journal]] ---- {{CC-BY}} &lt;!-- END --&gt; 2.11 Self-evaluation 2.12 Further reading, links and resources If in doubt, ask! If anything about this learning unit is not clear to you, do not proceed blindly but ask for clarification. Post your question on the course mailing list: others are likely to have similar problems. Or send an email to your instructor. Author: Boris Steipe boris.steipe@utoronto.ca Created: 2017-08-05 Modified: 2019-01-05 Version: 1.3 Version history: 1.3 Emphasize habit forming and cuncurrent editing. Note on license. 1.2 Make time tags mandatory; warn against fabrication. 1.1 Add GeSHi example 1.0 First live version 0.1 First stub I have come across “journal entries” that consist only of copy/pasted learning unit objectives…↩ If the Wiki automatically displays section numbers in its Table of Contents, you can turn that off in the preferences.↩ Media Wiki also has its own search functions that search for material everywhere on the Wiki, but this is likely not useful on the Student Wiki where many users may be writing about similar things.↩ "],
["insights.html", "Chapter 3 Insights! 3.1 Overview 3.2 Insights 3.3 Task 3.4 Template 3.5 Further reading, links and resources", " Chapter 3 Insights! (Instructions for authoring a collection of course-related insights) 3.1 Overview 3.1.1 Abstract: In paralell with your other work, you will maintain an insights! page on which you collect valuable insights and learning experiences of the course. Through this you ask yourself: what does this material mean - for the field, and for myself. 3.1.2 Objectives: Self-reflect on the meaning of the course contents. Question and develop your own attitudes about the course and the field. Concisely record essential insights. 3.1.3 Outcomes: Through your continuos work on the insights! page you have … Developed an understanding of what makes a learning activity meaningful; Identified and summarized the most meaningful learning experiencers in the course; Authored a collection of insights that can remind you of the course experience. 3.1.4 Deliverables: Your insights! page that is linked from your user page on the Student Wiki. 3.1.5 Prerequisites: This unit builds on material covered in the following prerequisite units: Journal Unit 3.1.6 Evaluation Your insights! page will be evaluated by the instructor at the end of the course for a maximum of 5 marks. Find the evaluation rubric here. 3.2 Insights Big whirls have little whirls that feed on their velocity, and little whirls have lesser whirls and so on to viscosity. ~[Lewis Fry Richardson](https://en.wikipedia.org/wiki/Lewis_Fry_Richardson) It’s rare that a fundamental insight is formulated so memorably, but it is so very valuable to step back and ask yourself: what was really important about what I just did? What is the one thing I should remember? Maintaining such a high-level perspective goes a long way to ensure that your learning effort turns into something valuable. Begin an insights! page that collects your most important ideas about this term. Be concise and succinct - focus on the essence of your experience. And if you can put it into rhyme - all the more memorable. Consider the marking rubric: continuous engagement is important, as well as successfully grasping the essence of what you are doing. You are welcome to study other’s pages, and to quote, but you must give credit where appropriate. Be very careful not to plagiarize. 3.3 Task Make a link to a new insights! page as a subpage of your user page on the Student Wiki. Make sure the page is created in the correct namespace, not in the main space of the Wiki. Edit the page to give it a meaningful structure. Add a category tag [[Category:Insights!]] to the page. As with all course-material, add a {{CC-BY}} tag to the bottom of the page to include a Creative Commons license. Whenever you make an interesting observation about the course, the material, or something else that you find inspiring, add it to your page. You can write only your insight, but it may be more valuable to add a bit of context. You may certainly review and revise, strenghten or discard insights throughout the term. And you are encouraged to study others opinions. However: be mindful that your insights are your own, personal, unique reflections. I could imagine one or two such insights per week. 3.4 Template You can use the following template of Wikitext for your insights or design your own. Take care: formatting counts for evaluation.: ====&lt;Insight Title&gt;==== &lt;context... &gt; ;&lt;insight&gt; :&lt;date&gt; {{Vspace}} 3.5 Further reading, links and resources If in doubt, ask! If anything about this learning unit is not clear to you, do not proceed blindly but ask for clarification. Post your question on the course mailing list: others are likely to have similar problems. Or send an email to your instructor. Author: Boris Steipe boris.steipe@utoronto.ca Created: 2017-08-05 Modified: 2017-08-07 Version: 1.0 Version history: 1.0 Live version 0.1 First stub "],
["plagiarism.html", "Chapter 4 Plagiarism and academic integrity 4.1 Overview 4.2 Plagarism 4.3 How to reference 4.4 When and what to reference 4.5 Reusing previous material 4.6 “Adjusting” results 4.7 Task 4.8 A final note 4.9 Further reading, links and resources", " Chapter 4 Plagiarism and academic integrity (Plagiarism, proper citing, steering clear of academic misconduct, rules for collaboration) 4.1 Overview 4.1.1 Abstract: In this course we operate a Full Disclosure Policy for attribution. This means everything that is not your own, original idea must be identified and properly attributed. 4 4.1.2 Objectives: This unit will: point out the rationale for proper attribution; define the “Full Disclosure Policy” for attribution in my courses; introduce the resources available to you to avoid plagiarism and other academic misconduct. 4.1.3 Outcomes: After working through this unit you: are aware how academic offences can be avoided with a full-disclosure policy; are familiar with proper citation formats for journal and Web contents; ensure that all your activities in this course and elsewhere are in accordance with the letter of the published policies, and the spirit of scientific integrity. 4.1.4 Deliverables: Time management: Before you begin, estimate how long it will take you to complete this unit. Then, record in your course journal: the number of hours you estimated, the number of hours you worked on the unit, and the amount of time that passed between start and completion of this unit. Journal: Document your progress in your Course Journal. Some tasks may ask you to include specific items in your journal. Don’t overlook these. Insights: If you find something particularly noteworthy about this unit, make a note in your insights! page. 4.2 Plagarism Make this unit the first entry of your Journal! This is the age of open source, boundless mashup, awesome reposts and instant repurposing of information. It might seem that our rules of referencing and citation are just another academic anachronism. After all, we all copy from stack overflow, right? No - actually: wrong for two reasons. One: information is not any longer a commodity that increases in value if its supply is artificially constrained. Rather the value of information in academia - our common currency - is now “mindshare”, and mindshare cannot grow without attribution. And two: part of any course at UofT is its “summative assessment”: we mark submissions to evaluate the aptitude and achievements of students. That can only be done if original thinking by the student is clearly identified, and distinguished from merely repeating other’s thoughts. But let’s face it: UofT has a plagiarism problem. This has gotten worse over the past years - and it seems worse in the CS realms than in the domains of the life sciences. Yet, even if all your peers think no one cares about missing attributions, that doesn’t make it somehow right: ethics is not a result of opinion polls. No matter how socially acceptable plagiarism has become, no matter how many others do “it”, no matter how many likes or upvotes or retweets a “No Big Deal!” post attracts, unethical behaviour is wrong. It goes against everything we stand for as scientists. And it is corrosive, not just for your community, but first and foremost for yourself. In this course we operate a Full Disclosure Policy. That doesn’t mean you can’t get good data and examples from wherever you find them - on the contrary I absolutely expect you to hunt everywhere for information and examples: biostars, stack, RBloggers, even reddit (sometimes). There is great value in finding how others have addressed a problem, or divide up and organize a particular topic, and compiling the knowledge of the entire community is a great starting point for excellent work. But (a) this process has to be transparent, and, indeed you need to develop and document a sense of pride in mastering this art and attributing the contributions of your sources, and (b) compiling information does not substitute for your understanding of the material that you are presenting. Regardless whether you are reusing, quoting, paraphrasing, summarizing or following someone else’s structure or advice: reference it. You can never reference too much, but if you don’t reference enough you are probably committing an academic offence and I am obliged by University Policy to take the issue to the Office of Student Academic Integrity (OSAI). Regardless whether you are writing an assignment, updating your journal, uploading code, replying to posts on the mailing list - for anything that is submitted for credit, directly or indirectly: make sure all your references are complete. The principle is quite simple: ** Full disclosure policy for this course:** If it’s not your own, new idea, it has a source. All sources must be referenced. 4.3 How to reference You probably have seen resources that refer to other’s observations or opinions, and teach you to reference in manuscripts and essays in the life sciences and the humanities. These are generally less relevant for the kind of work that we do, and perhaps this is one of the reasons for poor uptake. Indeed, most of the writing in our courses is informal, and it may not be obvious how to properly embed citations in the flow of the narrative. The solution is to thouroughly contextualize your attributions with statements such as: “inspired by…”, “based on…”, “according to …”, “following …”, “see also …”, etc. as appropriate. Some specific points to consider: On Wiki pages, use the text tag to organize your citations. In R code, put your citations directly into the code in a comment. The URL of an image on the Internet is not by itself an adequate reference. Author and context must be shown. All links in references must be to the original source, not to e.g. a blog post about the source. Code that is copied from e.g. stack overflow or similar must be referenced with a link to the post AND the name of the author. Use the APA citation format for this course. 4.4 When and what to reference Some material may be “common knowledge”. Obviously, you don’t need to cite the resource that taught you how to write a for-loop, for example. Where to draw the line? If in doubt, ask, discuss, seek consensus in the community and in class. Example code from an R package vignette that you adapt and reuse must be referenced. Code that you take from a different course must be referenced. Code that you take from this course must be referenced. Code that you have translated from a different language must be referenced. Code that you have jointly developed with a classmate must acknowledge the contribution. Code that you have copied from a classmate’s work on the Student Wiki must be referenced. Code that is open source must be referenced. Code that is in the public domain must be referenced. This one is particularly troublesome: some authors put their code into the public domain, and state that you are free to use it without any copyright restrictions and without need for acknowledgement. But this can give rise to a misunderstanding: it only refers to the legal status as far as reuse is concerned, it says nothing about authorship. Obviously: just because someone graciously allowed you to use their idea, that does not mean that you are the author. 4.5 Reusing previous material A second mistake that has brought students to the Dean’s office more than once is re-use of material from previous courses. This is a simple one: you can’t get academic credit for the same material twice. This means: if you have already submitted something for a different course elsewhere, or for a different assessment in the same course, it is no longer an original contribution. Of course you can cite your own work and then reuse it - if it’s useful, bravo - good for you. But you have to be upfront about it, and apply the Full Disclosure Policy in spirit. Again: if in doubt, ask for advice. 4.6 “Adjusting” results It sometimes happens that a piece of code you are submitting won’t run. It just won’t. You can’t see the mistake, it’s three in the morning and you just can’t take it anymore. It’s just a small variation from the spec - and you can easily fix the output by hand. So you edit a few lines in a printout, or a few cells in a spreadsheet, and submit that result. All good, right? No. Not good at all. You have just falsified your code output. In terms of academic misconduct this is called “concoction”. And it’s pretty high on the list of things that will make for a very bad day. Do not ever change code output by hand. If an assignment asks you to submit code and results, the exact code you submit must generate the exact output that is claimed for it. Obvioulsy, there will be assessment scripts that will verify that. And when the assessment script signals a discrepancy, that will set off a process … Above, I’ve highlighted a few issues that I have come accross in past courses. Below, are extensive resources that will help you work better. Go and read them. 4.7 Task Visit the following sites and read the material carefully: Smart Strategies (OSAI) How Not to Plagiarize (UofT Writing Advice) Quoting (UofT Writing Advice) Mostly relevant for essays, but also for your own journal: when to quote, when to paraphrase, when to summarize. Paraphrasing and Summarizing (UofT Writing Advice) Illustrating the distinction between illegitimate and proper paraphrase, and summary by example. Standard Documentation formats (UofT Writing Advice) This includes a concise overview on citing electronic sources. Then - for your own reference - put a model of the following three types of references into your journal: a procedure in the methods section of a journal article, as you would cite it in a technical report; a piece of code you found in a StackOverflow article, as you would put it as a comment into computer code; some contents from a classmate’s journal that you incoporate into your own journal. 4.8 A final note If you have any questions about these policies, if you would like to start a discussion, or if you can share some anecdotes: post on the mailing list. We need to make these policies alive and meaningful, otherwise we’ll see mistake after mistake, tears, anguish and missed graduations. No more! 4.9 Further reading, links and resources Code of Behaviour on Academic Matters The policy. (Governing Council of the University of Toronto.) If in doubt, ask! If anything about this learning unit is not clear to you, do not proceed blindly but ask for clarification. Post your question on the course mailing list: others are likely to have similar problems. Or send an email to your instructor. Author: Boris Steipe boris.steipe@utoronto.ca Created: 2017-08-05 Modified: 2019-01-15 Version: 1.1.1 Version history: 1.1.1 Clarification: this courses material falls under the same policy 1.1 Update to “Full Disclosure Policy” 1.0 Completed to first live version 0.2 Links to FAS material 0.1 Material collected from previous tutorial This includes journal articles and books, obviously, but also blogs, discussions on StackOverflow, Github gists, and especially course material of this and other courses, your peer’s notes and journal entries. and material you have produced previously.↩ "],
["backup.html", "Chapter 5 Data Backup Best Practice 5.1 Overview 5.2 Data backups 5.3 Task: 5.4 Self-evaluation 5.5 Notes 5.6 Further reading, links and resources", " Chapter 5 Data Backup Best Practice (Data backup technologies and best practice) 5.1 Overview 5.1.1 Abstract: 5.1.2 Objectives: This unit will provide a brief introduction to backup problems and methods to solve them. 5.1.3 Outcomes: After working through this unit you … have a sensible and effective strategy for backing up your computer; have demonstrated that you can recover data. 5.1.4 Deliverables: Time management: Before you begin, estimate how long it will take you to complete this unit. Then, record in your course journal: the number of hours you estimated, the number of hours you worked on the unit, and the amount of time that passed between start and completion of this unit. Journal: Document your progress in your Course Journal. Some tasks may ask you to include specific items in your journal. Don’t overlook these. Insights: If you find something particularly noteworthy about this unit, make a note in your insights! page. 5.2 Data backups When was the last time you made a full backup of your computer’s hard-drive? Too long ago? I thought so. Backup your hard-drive now. Risk is probability times damage. The annualized probability of hard drive failure is on the order of 3%. This means about three of your classmates in this course will lose all their data this year. It is a bit better for solid state drives (SSD), perhaps only 0.3 failures per year. But what is the damage? All your essays, coursework, all the pictures on your computer, that email from your first love… There is no question you need to have plans in place to protect your data. After all, storage failure is not a question of if, but when. Enterprise-scale data in bioinformatics labs need dedicated solution and that is actually an increasing problem. For your small scale, personal backup needs you have a variety of options; Cloud backup may be bandwidth limited; Mac OS X has things well covered with thier Time machine / Time capsule, I don’t know what the best equivalent is for other systems; off-machine storage in removable disk is a questionable startegy because everything that is not fully automatic is liable to fall victim to complecancy; Whenever possible, make differential backups. And remember: NO backup is a backup unless recovery of data has been tested and shown to work. 5.3 Task: Use this Google Search for links to recent articles about backup options. Read a few articles that are relevant for your computer. Decide on a backup strategy for your computer. Implement your strategy. Create a test file. Backup your computer. Delete your test file. Recreate the file from your last backup. 5.4 Self-evaluation 5.5 Notes 5.6 Further reading, links and resources Use this Google Search for links to recent articles about backup options. If in doubt, ask! If anything about this learning unit is not clear to you, do not proceed blindly but ask for clarification. Post your question on the course mailing list: others are likely to have similar problems. Or send an email to your instructor. Author: Boris Steipe boris.steipe@utoronto.ca Created: 2017-08-05 Modified: 2017-09-11 Version: 1.0 Version history: 1.0 Completed to first live version 0.2 Begin development from legacy material; points only 0.1 Material collected from previous tutorial "],
["cargocult.html", "Chapter 6 Cargo Cult Science 6.1 Overview 6.2 Cargo Cult 6.3 Task: 6.4 Self-evaluation 6.5 Notes 6.6 Further reading, links and resources", " Chapter 6 Cargo Cult Science (Cargo Cult science, Cargo Cult bioinformatics) 6.1 Overview 6.1.1 Abstract: Not all activities lead to valuable outcomes and “Cargo Cult Science” is an important metaphor for a class of conceptual problems that are the hallmark of “poor science”. The particular issue is that activites are causally disconnected from their claimed beneficial outcomes. 6.1.2 Objectives: This unit will: introduce the metaphor of a “Cargo Cult”, as applied to bioinformatics and science in general; illustrate with examples; discuss principles to avoid the problem. 6.1.3 Outcomes: After working through this unit you: can identify “Cargo Cult”-type issues; have contributed an example to our collection, and/or; have contributed to the discussion in our collection; are able to critically evaluate projects and activities regarding whether they can contribute to thier claimed value; are able to propose improvements. 6.1.4 Deliverables: Time management: Before you begin, estimate how long it will take you to complete this unit. Then, record in your course journal: the number of hours you estimated, the number of hours you worked on the unit, and the amount of time that passed between start and completion of this unit. Journal: Document your progress in your Course Journal. Some tasks may ask you to include specific items in your journal. Don’t overlook these. Insights: If you find something particularly noteworthy about this unit, make a note in your insights! page. 6.1.5 Prerequisites: You need the following preparation before beginning this unit. If you are not familiar with this material from courses you took previously, you need to prepare yourself from other information sources: Inquiry: The scientific method; evidence based reasoning; how to design, execute and document an experiment; Conjecture, hypothesis and theory. 6.2 Cargo Cult The concept of Cargo cult science was popularized by Richard Feynman in the 1974 Caltech Commencement address. In a nutshell, Feynman points out how scientific practices that lack “scientific integrity” are similar to the activities of a premodern cult in the South Sea islands that developed rituals for attracting goods-bearing supply airplanes by building mock airports. The essence of Cargo Cult is not merely poor science. What makes it “Cargo Cult” is a disconnect between form and contents: the form is compelling, but there can’t be a rational expectation of a benefit from the activity because there is no causal connection between the activity and the claimed outcome. This is often, but not always due to logical fallacies. The topic is interesting for bioinformatics because the deficiencies are often subtle, and hard for the non-expert to spot. To guard against Cargo Cult takes integrity, and practice. A structured approach may be helpful that first clearly identifies the hoped-for outcome, then defines the proposed activities, then asks in specific detail how the outcome would be caused by the activity. Causation is key here - many examples of Cargo Cult behaviour are based on a mistaken belief in causation, where actually merely a correlation was observed. But you have to be careful: the fact that causation has not been shown does not prove it is absent. And even if causation is absent, that does not automatically make the behaviour invalid: sometimes you are right for the wrong reason. Both cases are not Cargo Cult. Rather, it is characteristic for situations we should label as Cargo Cult that there “is no cargo in the system”: you are looking in the wrong place, you don’t have a control or reference value, you don’t understand your data - or similar problems. 6.3 Task: Read a brief introduction to ideas about “Cargo Cult Bioinformatics”. Visit the Student Wiki: Cargo_Cult_Science page (and its associated Student Wiki: Not_(quite)_Cargo_Cult_Science page) on the Student Wiki and add an example of your own that you have encountered during your studies or elsewhere[1]. Also, add to the discusssion of any of the existing examples. Comments that question whether the example actually should be called Cargo Cult, and that lead to improved focus and clarification are especially valuable. 6.4 Self-evaluation 6.5 Notes Make sure your example has not already been posted by someone else - it would be Cargo Cult to post it again. 6.6 Further reading, links and resources Student Contributions: Cargo Cult Examples Student Contributions: Not (quite) Cargo Cult Examples Wikipedia: List of Logical Fallacies a very comprehensive resource. One would wish that the presence of such a list itself would have a beneficial effect on science. If in doubt, ask! If anything about this learning unit is not clear to you, do not proceed blindly but ask for clarification. Post your question on the course mailing list: others are likely to have similar problems. Or send an email to your instructor. Author: Boris Steipe boris.steipe@utoronto.ca Created: 2017-08-05 Modified: 2017-09-11 Version: 1.1 Version history: 1.1 Add references to logical fallacies; review older submissions and move some into Not (quite) Cargo Cult page. 1.0 Completed to first live version 0.1 Material collected from previous tutorial "],
["netiquette-network-etiquette.html", "Chapter 7 Netiquette - (Network Etiquette) 7.1 Overview 7.2 Be kind 7.3 Pay attention who you reply to 7.4 Use informative subject lines 7.5 Don’t hijack threads 7.6 Follow the discussion 7.7 Describe problems clearly 7.8 Avoid screenshots 7.9 Show us that you’ve done your homework 7.10 Use mixed case and write full words 7.11 Don’t Troll 7.12 No need to directly address someone 7.13 Resolve when done 7.14 Self-evaluation 7.15 Notes 7.16 Further reading, links and resources", " Chapter 7 Netiquette - (Network Etiquette) (Etiquette for the Internet and for this course) 7.1 Overview 7.1.1 Abstract: Netiquette is a portmanteau of “network etiquette”. It is a collection of social conventions for communication on the Internet such as e-mail, mailing lists, forums … Here is a subset of relevance for our courses and workshops. 7.1.2 Objectives: Read about the basic rules and courtesies for communicating effectively and professionally in mailing lists and internet forums. 7.1.3 Outcomes: Apply the principles discussed on the page consistently throughout the course. Identify weaknesses and propose updates. 7.1.4 Deliverables: Time management: Before you begin, estimate how long it will take you to complete this unit. Then, record in your course journal: the number of hours you estimated, the number of hours you worked on the unit, and the amount of time that passed between start and completion of this unit. Journal: Document your progress in your Course Journal. Some tasks may ask you to include specific items in your journal. Don’t overlook these. Insights: If you find something particularly noteworthy about this unit, make a note in your insights! page. Is there a pet-peeve of yours that is not mentioned here? Initiate a discussion on that on the course mailing list or contribute to the discussion if one has already started. Is this page still up to date? Cultural norms change, and our communication habits have changed tremendously in the past decade. Propose updates and/or improvements on on the course mailing list or contribute to the discussion if one has already started. 7.2 Be kind This is the single most important rule. We are all working together. Let’s all make this a pleasant and exciting experience. 7.3 Pay attention who you reply to If you use “reply”, your message will go the entire list. Pause a moment, and consider whether this is what you want. Perhaps your message is of interest to only a single recipient? Or your message may be personal, or confidential … 7.4 Use informative subject lines Spend a moment thinking what your post is about, then condense the message into a few words. This goes a long way towards: allowing the recipients to estimate how interested they are in the contents of your message; retrieving a thread in your archived messages; browsing the archives for information; keeping the ensuing discussion on topic. Try to be specific for example, this subject line is poor: Chimera doesn’t work! Much better would be: Can’t load molecule in Chimera after editing coordinates If you must change the subject line, quote the old line as in: New subject (was: old subject) 7.5 Don’t hijack threads If you have a new question, never simply write it into the reply to an older thread. This is called “Thread Hijacking” and it is rude and ineffective and it will cause me to have a poor opinion of your manners. If you hijack a thread: your new question will end up in an unrelated discussion; it will be much harder to search; the original poster’s question gets diluted and may never get appropriately discussed; you demonstrate that you didn’t actually care enough to type up a subject line. Use your mail-client’s reply function if you contribute to a thread, write a new mail or post if you have something new to add. [1] As a corollary: if your post is related to the thread, by all means do use the reply function of your mail client and don’t change the subject line, even if you think the original subject line was not well written or contained a (non-critical) typo etc. 7.6 Follow the discussion From time to time I see questions asked that have already been answered previously. This shows me that you did not follow the discussion. What do you think I think of that? Exactly. 7.7 Describe problems clearly Sometimes your problems will be due to a faulty assumption, sometimes due to incompatible software, sometimes due to bugs, or errors in assigned tasks … The more clearly you describe what you did and what happened, the more likely it is someone will be able to help. Simply stating “this or that didn’t work” will get you nowhere. Ask yourself: Did I specify the circumstances under which the problem arose? Did I specify exactly what happened and what I believe the problem is? Have I given enough information so that someone else would be able to reproduce the problem? 7.8 Avoid screenshots Almost always when I see a screenshot of errors that arise during assignments, the issue would have been better described by copy/pasting code and text. Screenshots, as images, are a dead-ends for further analysis. If you paste a screenshot with a sequence ID, others will need to type it out, awkwardly, on a different page to reproduce your problem. If you paste a screenshot with a piece of code, others will have to type the code, awkwardly, into their code editor to reproduce your problem and experiment for a solution. If you paste a screenshot of an error message, it is that much more work to Google for the message and figure out what could have caused it. In all those cases, you prevent others from helping you quickly and effectively and you are wrong to expect others to type down the contents of your images because you didn’t copy/paste the essential material. That’s not smart. Also you are wasting other’s bandwidth on their computers or mobile devices. That’s rude. The only case where screenshots are encouraged is where an image is involved - but even then, for example when discussing R plots, the code that has generated the plot would be more helpful. dput() is your friend. And learn to create MWEs (Minimal Working Examples). 7.9 Show us that you’ve done your homework The “How to Ask Questions the Smart Way” document gives the following excellent advice: Hasty-sounding questions get hasty answers, or none at all. The more you do to demonstrate having put thought and effort into solving your problem before seeking help, the more likely you are to actually get help. [...] Never assume you are entitled to an answer. [...] You will earn an answer, if you earn it, by asking a substantial, interesting, and thought-provoking question - one that implicitly contributes to the experience of the community rather than merely passively demanding knowledge from others. I can’t put it any better. 7.10 Use mixed case and write full words Using UPPERCASE ONLY IS THE TYPOGRAPHIC EQUIVALENT OF SHOUTING; this is appropriate only under exceptional circumstances. some people use lowercase only. are they too lazy to find the caps key? It also looks lik u cant B rly botherd 2 rite if u rite ur txt with textN shorth&amp;. 7.11 Don’t Troll Just don’t do it, oK? Also remember: trolling, stalking, impersonating etc. may fall under sanctionable offences of the University’s Student Code of Conduct. 7.12 No need to directly address someone Sending a message to the list reaches all list members. That’s the point of the list: we are sharing discussions with everyone. There is no need to address anyone in particular (not even your professor), unless you are responding publicly to a specific statement by that person. Even generic salutations - like Howdy or Dear all, are nowadays usually omitted for the sake of brevity. 7.13 Resolve when done Once the problem has been solved, there is no need to thank contributors - but don’t just walk away, you are not done! It is very important to share feedback whether the advice received has worked or not, or if something else worked instead. People helping you on a mailing list don’t expect a reward except for one thing: the little satisfaction that their effort was actually helpful. Don’t deny that, that would be rude. A separate reason to resolving such threads is that they are archived, and when others are looking for their solution they need to be able to tell whether there is hope to be found here. 7.14 Self-evaluation Question 1: Zachary has run into an issue when downloading an R package. He posts a screenshot of his computer in the mailing list to ask what could have gone wrong. Good or bad? Question 2:Amadeus has been following a discussion on the mailing list about Zachary’s problem. That reminds him that he wasn’t sure how to find a package that contains a particular function. He replies to Zachary’s thread and asks his question. Good or bad? Question 3:Kaila responds to a post I have made, about some subtleties in identifying homologous sequences by sequence alignment. She is in a hurry and doesn’t address me by name in her post. Good or bad? 7.15 Notes Some mailing list software builds thread based on subject line and some software builds thread based on message ID. Only changing the subject line may not be sufficient to start a new thread. Since you usually don’t know which does what, use the rule above to be sure. 7.16 Further reading, links and resources Dall’Olio et al. (2011) Ten simple rules for getting help from online scientific communities. PLoS Comput Biol 7:e1002202. (pmid: 21980280) PubMed Netiquette - Virginia Shea’s Core Rules of Netiquette How to create a Minimal, Complete, and Verifiable example – R advice via stackoverflow. How to Ask Questions the Smart Way for the technical minded, excellent advice! If in doubt, ask! If anything about this learning unit is not clear to you, do not proceed blindly but ask for clarification. Post your question on the course mailing list: others are likely to have similar problems. Or send an email to your instructor. Author: Boris Steipe boris.steipe@utoronto.ca Created: 2017-08-05 Modified: 2017-08-17 Version: 1.1 Version history: 1.1 Add thread resolution (Gabi Morgenshterns suggestion). 1.0 First live version using contents from an old page. 0.1 First stub "],
["information-sources-for-bioinformatics.html", "Chapter 8 Information Sources for Bioinformatics 8.1 Overview 8.2 Journals 8.3 Forums 8.4 Self-evaluation 8.5 Further reading, links and resources", " Chapter 8 Information Sources for Bioinformatics (Wikipedia, NAR, Bioinformatics.ca, PubMed, Citation index) 8.1 Overview 8.1.1 Abstract: This unit introduces key information sources for bioinformatics: journals, forums, and supporting sites. 8.1.2 Deliverables: Time management: Before you begin, estimate how long it will take you to complete this unit. Then, record in your course journal: the number of hours you estimated, the number of hours you worked on the unit, and the amount of time that passed between start and completion of this unit. Journal: Document your progress in your Course Journal. Some tasks may ask you to include specific items in your journal. Don’t overlook these. Insights: If you find something particularly noteworthy about this unit, make a note in your insights! page. Read the introductory notes on bioinformatics concepts for some general observations on bioinformatics, to set the stage. Read the introductory notes on information sources for bioinformatics. 8.2 Journals Visit the Nucleic Acids Research Journal (NAR) site and find the current database volume and the Web service volume. Task yourself to find at least one database and service that interests you, visit it and poke around. You should aim to develop an intuition for what to expect with such resources and how to use the services. – (Next, visit bioinformatics.ca, navigate to the “Bioinformatics links directory” and try a sample search - e.g. for “disorder”, or “localization”. This service has been discontinued - thanks for notifying me, Xiaowen … will update.) – Incidentally: you can subscribe to regular Table of Contents updates from any journal. nature and Science should for sure be in your inbox, but subscribe to some of the bioinformatics journal alerts too, at least for this term. A current list of journals is here: List of bioinformatics journals. 8.3 Forums Much current, active exchange of bioinformatics knowledge happens in non-traditional platforms: Visit each of the forums below and find (at least) one item that interests you. BioStars: General bioinformatics, computational-, and systems biology questions (timesink warning!) Reddit: the bioinformatics “subreddit” (timesink warning!) R-help: The R programming language Stack Overflow: R-related questions BioConductor Support: for all questions about the BioConductor Project Cross Validated: statistics related questions on Stack-exchange 8.4 Self-evaluation 8.5 Further reading, links and resources If in doubt, ask! If anything about this learning unit is not clear to you, do not proceed blindly but ask for clarification. Post your question on the course mailing list: others are likely to have similar problems. Or send an email to your instructor. Author: Boris Steipe boris.steipe@utoronto.ca Created: 2017-08-05 Modified: 2019-09-14 Version: 1.1 Version history: 1.1 Bioinformatics.ca links database no longer exists 1.0 Live version 0.1 First stub "],
["about.html", "Chapter 9 About 9.1 Attributions:", " Chapter 9 About Original content for this book was created by Boris Steipe from Boris Steipe BCB420 wiki resources licensed under CC BY 4.0. 9.1 Attributions: This book was created using The bookdown package and can be installed from CRAN or Github: install.packages(&quot;bookdown&quot;) # or the development version # devtools::install_github(&quot;rstudio/bookdown&quot;) Icons are from the “Very Basic. Android L Lollipop” set by Ivan Boyko licensed under CC BY 3.0. "]
]
